const worksData = [
  {
    id: 0,
    image: "./modal_img/mall.png",
    title: "쇼핑몰 홈페이지",
    badge: ["React", "Redux-Thunk", "Firebase", "Styled-Components"],
    desc: [
      "Redux-Thunk 를 통한 전역 상태 관리",
      "Authentication, 찜목록, 장바구니 Reducer 분리",
      "filter 메서드를 통한 상품 검색 기능",
      "Firebase Authentication API를 통해 Google 로그인, 회원가입",
    ],
    url: "https://mallproject-f2a7f.web.app/",
    git: "https://github.com/IPYURA/SHOES-Mall",
    modalInfo: {
      img: "./modal_img/mall.png",
      additionalImg: [],
      period: "24.01.29 - 24.02.15",
      features: [
        "상품 이름 검색 기능",
        "상품의 이미지, 이름 클릭 시 상품 상세 페이지 이동",
        "Firebase를 이용하여 Google 계정 로그인 구현",
        "로그인 여부에 따라 장바구니 추가, 찜하기 사용가능",
        "하트 아이콘을 눌러 찜하기",
        "상품 상세 페이지에서 장바구니에 추가",
        "장바구니 목록, 찜목록 페이지 구현",
        "장바구니목록, 찜목록 페이지에서 항목 삭제, 전체 삭제 구현",
      ],
      desc: [
        "전역적인 상태관리를 위해 React-Redux Thunk를 사용하여 로그인 여부, 장바구니 목록, 찜목록을 각각의 Reducer로 분할하여 관리했습니다.",
        "",
        "[페이지 이동 시 스크롤이 초기화되지 않는 문제]",
        "SPA에서 일반적으로 발생하는 문제라는 사실을 알게 되었습니다.",
        "이를 해결하기 위해 util 파일에 useLocation과 useEffect를 사용하여 스크롤을 초기화시키는 함수를 만들었습니다. 이 함수를 최상위 컴포넌트에서 전역적으로 실행시켜 스크롤 문제를 해결했습니다.",
        "",
        "[map 메서드로 상품이 화면에 나타나지 않는 문제]",
        "product라는 state를 만들어주고, 이 state에 데이터가 배열 형식으로 들어갈 예정이었습니다.",
        "Item컴포넌트 반복출력을 위해 map 메서드를 사용했지만, 배열이 아니라는 오류가 나왔습니다.",
        "fetch를 통해 호스팅된 JSON데이터를 받아오고, data 라는 변수에 저장하기 위해 json 함수를 사용했습니다.",
        "하지만 await fetch문이 실행되고 Promise가 처리되는 동안 setState가 실행되어 undefined 상태의 data변수를 state에 저장하고 있다는 사실을 확인했습니다.",
        "fetch는 Response 객체로 이행하는 Promise가 반환된다는 사실을 학습했고, json함수에도 Promise 객체의 완료를 기다리는 await을 사용하여 해결했습니다.",
        "이 문제를 통해 async와 await에 대한 개념을 더 깊이 학습할 수 있었습니다.",
        "",
        "[회원가입 이후 로그인 시 회원가입 페이지로 돌아가는 문제]",
        "상품의 디테일 페이지 등에서 authenticate를 충족시키지 않아 로그인 페이지로 이동했을 경우, 사용자 경험 상 페이지의 연속성을 주어야 한다고 생각했습니다.",
        "그래서 로그인 완료 시 뒤로가기 방식을 채택했었지만 회원가입을 통해 로그인한 사용자에게는 적합하지 않다고 판단했습니다.",
        "useNavigate에 states를 전달할 수 있다는 사실을 알게 되었고 회원가입을 통해 로그인페이지로 온 사용자에게만 state에 true값을 주어 로그인페이지에서 삼항연산자를 쓰는 방식으로 문제를 해결했습니다.",
        "",
        "[찜하기 아이콘의 찜목록 미반영 문제]",
        "찜하기 아이콘(하트)이 메인 페이지와 상품의 상세페이지에 존재하는데, 전역적인 상태가 반영이 되었음에도 하트 아이콘이 눌림상태가 되지 않는 문제가 있었습니다.",
        "Redux의 Action을 통한 Reducer 내 InitialState의 변경이 이루어져도 useEffect를 통해 컴포넌트가 재렌더링 되지 않는다는 사실을 발견하였습니다.",
        "이를 해결하기 위해, 하트 아이콘이 있는 두 페이지에 각각 페이지 내에서 작동하는 스타일을 위한 State를 만들고 비교 연산자를 통한 논리를 만들어주었고, 문제를 해결했습니다.",
      ],
    },
  },
  {
    id: 1,
    image: "./screen_img/nutrition1.JPG",
    title: "단백질 기록하기",
    badge: ["React", "Redux", "Styled-Components"],
    desc: [
      "LocalStorage를 사용한 즐겨찾기 기능",
      "Redux를 통한 전역 상태 관리",
      "반응형 (PC, Tablet, Mobile) 구현",
    ],
    url: "https://nutrition-4a215.web.app/",
    git: "https://github.com/IPYURA/Protein-Write",
    modalInfo: {
      img: "./screen_img/nutrition1.JPG",
      additionalImg: [
        "./modal_img/protein_styleGuide.png",
        "./modal_img/figma_protein.png",
      ],
      period: "24.01.02 - 24.01.10",
      features: [
        "먹은 단백질 기록하기",
        "자주 먹는 음식은 즐겨찾기로 간편 등록",
        "단백질 섭취 목표량 설정 후 현재 달성률 (%) 확인",
      ],
      desc: [
        "React-Redux의 전역적인 상태관리에 대해 익힐 수 있던 프로젝트였습니다.",
        "map 메서드를 사용하여 컴포넌트를 반복 출력시키는 과정에서 “배열이 아니다”라는 오류가 많이 발생했었습니다.",
        "데이터를 하나하나 콘솔에 로그로 나타낸 결과, 배열이 아닌 객체 형태를 출력하고 있는 것을 확인했습니다.",
        "Action과 Reducer, Store 간의 객체 형태의 단방향 데이터 흐름을 공부하고, “Deep Dive” 책과 “MDN”을 참고하며 모호하게 알고있었던 Spread Opertor와 Destructuring Assignment의 개념을 다시 잡았습니다.",
        "그 결과 대부분의 오류들을 해결할 수 있었고, 코드의 가독성을 높일 수 있었습니다.",
        "Figma를 사용하여 스스로 디자인부터 세세하게 설계했다는 점에 의의가 있는 프로젝트입니다.",
      ],
    },
  },
  {
    id: 2,
    image: "./screen_img/zzanggu.jpeg",
    title: "내가 짱구 속 인물이라면?",
    badge: ["React", "React-Router-DOM", "JSON", "Styled-Components"],
    desc: [
      "createSearchParams()로 쿼리값 생성",
      "useSearchParams()로 받아온 쿼리값에 따른 결과지 출력",
      "반응형 (PC, Tablet, Mobile) 구현",
    ],
    url: "https://mbti-test-b7527.web.app",
    git: "https://github.com/IPYURA/zzanggu-MBTI-Test",
    modalInfo: {
      img: "./screen_img/zzanggu.jpeg",
      additionalImg: [],
      period: "24.01.12 - 24.01.16",
      features: [
        "간단한 심리 검사 12문항을 통해 MBTI 성향을 파악",
        "짱구는 못말려의 인물들 중 성격이 비슷한 인물을 결과페이지에 보여주고 간단한 설명 출력",
        "질문지의 진행 상황을 상단 Progress Bar로 표시",
      ],
      desc: [
        "마지막 문항에서 질문지의 인덱스를 초과하여 데이터를 불러오게 되어, 데이터가 없다는 오류를 만나게 되었습니다.",
        "이를 삼항 연산자의 조건식을 수정하여 문제를 해결했습니다.",
        "React-Bootstrap 내의 Progress Bar를 불러와 사용했는데, transition 속성으로 인해 width값이 마저 채워지지도 않았는데 다음페이지로 넘어가는 것이 시각적으로 완료되지 않은 것처럼 보이는 문제가 있었습니다.",
        "이를 setTimeout 메서드를 사용하여 애니메이션이 모두 끝난 시점에 useNavigate가 동작하도록 했습니다.",
        "쿼리 값을 전달하는 방법에 대해 학습할 수 있던 프로젝트였습니다.",
      ],
    },
  },

  {
    id: 3,
    image: "./screen_img/d_kanban.png",
    title: "칸반 보드",
    badge: ["React", "Recoil", "Typescript"],
    desc: [
      "Recoil을 사용하여 할 일(TO_DO), 진행 중(DOING), 완료됨(DONE) 항목을 전역적인 상태로 만듦",
      "react-beautiful-dnd 를 사용하여 항목을 드래그하여 다른 보드로 옮기거나, 순서 변경 가능",
      "react-hook-form 을 사용하여 input을 통해 입력된 항목 추가",
    ],
    url: "https://kanban-board-7a807.web.app/",
    git: "https://github.com/IPYURA/Kanban-Board",
    modalInfo: {
      img: "./screen_img/d_kanban.png",
      additionalImg: [],
      period: "2023.12.28 - 2023.12.31",
      features: [
        "할 일 추가하기",
        "할 일, 진행 중, 완료됨 보드 간 드래그로 항목 이동 가능 ",
      ],
      desc: [
        "하나의 Atom에 key값으로 배열 이름을 넣고, value에 배열의 값을 넣은 형태로 만들었습니다.",
        "Object.keys() 함수를 사용하여 배열의 이름 값들을 배열 형태로 불러오고, 이름들이 모인 배열을 map메서드를 사용하면, 하나의 Atom으로도 여러 개의 다른 컴포넌트를 생성할 수 있다는 사실을 학습했습니다.",
        "이동시키는 항목, 원래 있던 보드, 새롭게 가게 될 보드에 대한 값에 대한 정보를 공식문서를 찾아보며 익혔습니다.",
        " splice메서드를 사용하여 원래 있던 보드와 이동할 보드의 원본 배열의 값을 변화시켰습니다.",
        " splice메서드에 많이 익숙해질 수 있는 프로젝트였습니다.",
        "항목이 생성 될 때, id라는 key를 미리 설정해두었고, value를 Date.now() 함수를 사용하여 고유성을 보장할 수 있다는 것을 학습했습니다.",
      ],
    },
  },
  {
    id: 4,
    image: "./screen_img/banksalad.png",
    title: "뱅크샐러드",
    badge: ["HTML", "SCSS", "Javascript"],
    desc: [
      "SCSS를 사용한 뱅크샐러드 클론코딩 홈페이지",
      "무한 + 자동 슬라이더, 페이저 구현",
      "깔끔한 코드를 작성하려 고민하고 노력한 프로젝트입니다.",
    ],
    url: "https://banksalad-clone.web.app/",
    git: "https://github.com/IPYURA/Banksalad-clone",
    modalInfo: {
      img: "./screen_img/d_banksalad.JPG",
      additionalImg: [],
      period: "24.02.16 - 24.02.18",
      features: [
        "무한 + 자동 슬라이더",
        "슬라이더 하단 페이저를 통해 슬라이드 번호 시각화",
        "페이저를 눌러 해당 슬라이드로 이동",
        "슬라이드 또는 페이저에 마우스 오버 시 슬라이드 멈춤",
        "미니 슬라이드 + 좌/우 버튼 구현",
        "GNB 메뉴에 마우스 오버 시 해당 메뉴 보여주기",
        "GNB 반응형 구현(반응형은 헤더만 구현했습니다.)",
      ],
      desc: [
        "[Stop슬라이더 오류 : 페이저 마우스오버와 슬라이드 마우스오버 겹침]",
        "자동으로 넘어가는 슬라이더 내의 정보를 사용자가 편하게 볼 수 있도록 마우스오버 시 슬라이더 Stop 기능을 구현했습니다.",
        "페이저를 한 번 눌러 슬라이드를 이동한 시점부터 슬라이드가 더 적은 주기로 자주 이동하는 오류가 있었습니다.",
        "Task Que에 setInterval로 구현된 autoSlide 기능이 두 번 들어가게 된 것이원인이라 판단했습니다.",
        "CSS상으로 슬라이더 범위 안에 있던 페이저의 mouseleave 이벤트와 슬라이더의 mouseleave 이벤트가 중복 적용되는 것을 확인하고, 사이즈가 더 큰 슬라이더의 이벤트만 남기는 것으로 해결했습니다.",
        "",
        "[MaxIndex가 서로 다른 6개의 슬라이더를 하나의 함수로 해결]",
        "“뱅크샐러드 pick!” section에서 슬라이더 개수가 서로 달랐습니다.",
        "슬라이드 개수 별 함수를 따로 만들면, 비슷한 기능을 하는 함수가 여러 개 만들어지고, 성능적으로도 좋지 않다고 판단했습니다.",
        "버튼 클릭 함수, 방향 설정 함수, 인덱스 Limit을 정해서 0으로 초기화하는 함수로 기능을 분리하여 매개변수로 값을 동적으로 받도록 하였습니다.",
        "그 결과, 함수의 재사용이 가능해지고 기능을 분할하여 코드가 짧아지고 가독성을 높일 수 있었습니다.",
        "",
        "성능 향상을 위해 코드를 여러 번 수정하면서, addEventListener가 Call Stack에서 처리되는 과정을 학습할 수 있었습니다.",
        "Call Stack와 힙, Task Que에 대해 상세히 공부할 수 있었던 프로젝트였습니다.",
      ],
    },
  },
  {
    id: 5,
    image: "./screen_img/melon.png",
    title: "멜론 Web App",
    badge: ["React", "JSON"],
    desc: [
      "React.Memo() 로 불필요한 재렌더링 방지",
      "useState()로 Nav 스타일 조정",
      "fetch를 통한 JSON 데이터 받아오기",
    ],
    url: "https://melon-web-app.web.app/",
    git: "https://github.com/IPYURA/Melon-Web-App",
    modalInfo: {
      img: "./screen_img/melon.JPG",
      additionalImg: [],
      period: "23.12.10 - 23.12.14",
      features: [
        "메뉴 탭 이동",
        "햄버거 메뉴 펼치기 / 닫기",
        "JSON 데이터로 가져온 음원차트 등의 정보 보여주기 ",
      ],
      desc: [
        "React의 SSR 기초를 익히며 만들었던 프로젝트입니다. State를 통해 상태를 관리한다는 것과 Props를 통해 자식 컴포넌트에게 상태를 전달할 수 있는 것을 학습했습니다.",
        "컴포넌트가 여러 개로 쪼개질 때, Props를 여러 단계에 걸쳐 전달하게 되는 'Props Drilling' 의 불편함을 느꼈습니다. 전역적으로 상태를 관리할 수 있는 무언가가 필요하다는 것을 꺠달았습니다.",
        "map메서드를 통해 컴포넌트를 반복하여 출력시킬 수 있고, map 메서드를 쓸 때 고유의 key 값을 주어야하는 것을 학습했습니다.",
      ],
    },
  },

  {
    id: 6,
    image: "./modal_img/portfolio.png",
    title: "개인 포트폴리오 홈페이지",
    badge: ["React", "Styled-Components"],
    desc: ["현재 보고계신 페이지입니다."],
    url: "https://my-portfolio-1f2a6.web.app/",
    git: "",
    modalInfo: {
      img: "./modal_img/portfolio.png",
      additionalImg: ["./modal_img/portfolio_styleGuide.png"],
      period: "24.01.17 - 24.01.26",
      features: [
        "Navigation 메뉴를 통한 페이지 자동 스크롤 이동",
        "모달창을 통한 상세 설명 페이지",
      ],
      desc: [
        "이미지를 삽입하는 과정에서 경로값을 찾아오지 못하는 문제가 있었습니다.",
        "이후 jsx 파일에서 절대 경로는 public 폴더를 기준으로 한다는 점과 css 파일에서 절대 경로는 src 폴더를 기준으로 한다는 사실을 학습했습니다.",
        "",
        "비슷한 느낌의 컬러톤과 폰트의 사용, border-radius값으로 사용자 입장에서 일관된 분위기를 느낄 수 있도록 고민했습니다.",
        "프로젝트에서는 사용자가 더 주의를 기울이기 쉬운 디자인을 위해 색상과 폰트 두께의 차이를 조절했습니다. 또, 반응형에서 바뀔 레이아웃과 어떤 형태로 바뀌는 것이 심미성이 좋을지 고민하여 제작했습니다.",
      ],
    },
  },
];

export default worksData;
